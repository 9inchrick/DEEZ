from conversational_engine import nlu, nlg
from code_generator import python_generator
import os

# (display_script_content function remains the same)
def display_script_content(script_path: str):
    try:
        with open(script_path, "r") as f:
            content = f.read()
        print(f"--- Content of {script_path} ---")
        print(content)
        print("--- End of content ---")
    except FileNotFoundError:
        print(f"Error: Could not find script {script_path} to display.")
    except Exception as e:
        print(f"Error reading script {script_path}: {e}")

def main_loop():
    print(nlg.generate_response("greeting"))
    active_language = "python" 
    current_script_name = None 

    while True:
        prompt_script_name = f" ({current_script_name})" if current_script_name else ""
        user_input = input(f"[{active_language}{prompt_script_name}] > ")
        if user_input.lower() in ["exit", "quit"]:
            print("Exiting agent. Goodbye!")
            break

        parsed_info = nlu.parse_intent(user_input)
        intent = parsed_info.get("intent")
        entities = parsed_info.get("entities", {})

        response = ""
        action_taken = False # Flag to indicate if a code-generating action was attempted

        if intent == "unknown":
            response = nlg.generate_response("unknown_intent")
        elif intent == "specify_language":
            # (remains the same)
            if "language" in entities:
                if entities["language"].lower() == "python":
                    active_language = entities["language"].lower()
                    response = nlg.generate_response(intent, entities)
                else:
                    response = f"Sorry, I can only generate Python code at the moment. Staying with {active_language}."
            else:
                response = "Which language would you like to use?"

        elif active_language == "python":
            action_taken = True # Potential code-gen action
            if intent == "create_script":
                # (remains the same)
                script_name = entities.get("script_name")
                if script_name:
                    try:
                        comment = f"This script, '{script_name}', was auto-generated by MyAppAgent."
                        created_path = python_generator.create_new_script(script_name, initial_comment=comment)
                        response = nlg.generate_response(intent, entities) # Base NLG response
                        response += f" Script created at '{created_path}'." # Agent specific detail
                        current_script_name = script_name
                        display_script_content(created_path)
                    except FileExistsError as fee:
                        response = str(fee) + " Please choose a different name or delete the existing file."
                    except Exception as e:
                        response = f"Error creating script: {e}"
                        print(f"DEBUG: Error creating script: {e}")
                else:
                    response = nlg.ask_clarification("What do you want to name the script?")
                print(f"DEBUG: Intent='{intent}', Entities='{entities}', Current Language='{active_language}'")

            elif intent == "add_function":
                # (remains the same)
                function_name = entities.get("function_name")
                function_params = entities.get("parameters", []) 
                target_script = entities.get("target_script", current_script_name)
                if not function_name:
                    response = nlg.ask_clarification("What is the name of the function you want to add?")
                elif not target_script:
                    response = nlg.ask_clarification(f"Which script should I add the function '{function_name}' to? (Or create a script first)")
                else:
                    script_path_to_modify = os.path.join("generated_scripts", target_script)
                    try:
                        result = python_generator.add_function_to_script(target_script, function_name, parameters=function_params) 
                        if result == "Success":
                            param_str = ", ".join(function_params)
                            base_response = nlg.generate_response(intent, entities) 
                            response = f"{base_response} Function '{function_name}({param_str})' added to '{target_script}'."
                            current_script_name = target_script 
                            display_script_content(script_path_to_modify)
                        else: 
                            response = result
                    except Exception as e:
                        response = f"Error adding function: {e}"
                        print(f"DEBUG: Error adding function: {e}")
                print(f"DEBUG: Intent='{intent}', Entities='{entities}', Current Language='{active_language}'")

            elif intent in ["add_print_statement", "add_return_statement"]:
                function_name = entities.get("function_name")
                expression_str = entities.get("expression") 
                target_script = entities.get("target_script", current_script_name)
                statement_type = "print" if intent == "add_print_statement" else "return"

                if not function_name:
                    response = nlg.ask_clarification("Which function do you want to modify?")
                elif not expression_str:
                    response = nlg.ask_clarification(f"What do you want to {statement_type} in function '{function_name}'?")
                elif not target_script:
                    response = nlg.ask_clarification(f"Which script contains the function '{function_name}'?")
                else:
                    script_path_to_modify = os.path.join("generated_scripts", target_script)
                    try:
                        result = python_generator.add_statement_to_function(
                            target_script, function_name, statement_type, expression_str
                        )
                        if result == "Success":
                            base_response = nlg.generate_response(intent, entities) # Base NLG response
                            # Agent adds specific details to the response
                            response = f"{base_response} Specifically, '{statement_type} {expression_str}' was added to function '{function_name}' in '{target_script}'."
                            current_script_name = target_script 
                            display_script_content(script_path_to_modify)
                        else:
                            response = result # Error message from generator
                    except Exception as e:
                        response = f"Error adding statement: {e}"
                        print(f"DEBUG: Error adding statement: {e}")
                print(f"DEBUG: Intent='{intent}', Entities='{entities}', Current Language='{active_language}'")
            
            else: # Other intents when language is Python but not code-gen related
                action_taken = False 
                response = nlg.generate_response("confirmation", entities)
        
        else: # Language other than Python is selected
            response = f"I'm currently set to {active_language}. Please switch to Python if you want to generate Python code."

        if response: 
            print(response)
        elif not action_taken and intent != "unknown": 
             print(nlg.generate_response("unknown_intent") + f" I can't perform '{intent}' with {active_language} or it's an unhandled command.")

if __name__ == "__main__":
    main_loop()
